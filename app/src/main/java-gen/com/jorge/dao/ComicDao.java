package com.jorge.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jorge.dao.Comic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMIC".
*/
public class ComicDao extends AbstractDao<Comic, Long> {

    public static final String TABLENAME = "COMIC";

    /**
     * Properties of entity Comic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Comic_id = new Property(1, int.class, "comic_id", false, "COMIC_ID");
        public final static Property Chapter_id = new Property(2, int.class, "chapter_id", false, "CHAPTER_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Picnum = new Property(4, int.class, "picnum", false, "PICNUM");
        public final static Property Filesize = new Property(5, int.class, "filesize", false, "FILESIZE");
        public final static Property Chapter_order = new Property(6, int.class, "chapter_order", false, "CHAPTER_ORDER");
    };


    public ComicDao(DaoConfig config) {
        super(config);
    }
    
    public ComicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMIC_ID\" INTEGER NOT NULL ," + // 1: comic_id
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 2: chapter_id
                "\"TITLE\" TEXT," + // 3: title
                "\"PICNUM\" INTEGER NOT NULL ," + // 4: picnum
                "\"FILESIZE\" INTEGER NOT NULL ," + // 5: filesize
                "\"CHAPTER_ORDER\" INTEGER NOT NULL );"); // 6: chapter_order
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMIC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getComic_id());
        stmt.bindLong(3, entity.getChapter_id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getPicnum());
        stmt.bindLong(6, entity.getFilesize());
        stmt.bindLong(7, entity.getChapter_order());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comic readEntity(Cursor cursor, int offset) {
        Comic entity = new Comic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // comic_id
            cursor.getInt(offset + 2), // chapter_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getInt(offset + 4), // picnum
            cursor.getInt(offset + 5), // filesize
            cursor.getInt(offset + 6) // chapter_order
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComic_id(cursor.getInt(offset + 1));
        entity.setChapter_id(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicnum(cursor.getInt(offset + 4));
        entity.setFilesize(cursor.getInt(offset + 5));
        entity.setChapter_order(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
